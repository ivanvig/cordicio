.. Cordicio documentation master file, created by
   sphinx-quickstart on Sun Jul 21 13:16:53 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Cordicio documentation
======================

Cordicio is a `Chisel <https://github.com/chipsalliance/chisel>`_
implementation of a `CORDIC <https://en.wikipedia.org/wiki/CORDIC>`_.

It currently supports rotation and vectoring mode and works on any
quadrant.

Getting Started
---------------

Using as a `FuseSoC <https://github.com/olofk/fusesoc>`_ core:

Add the FuseSoC generator library to get the chisel generator

.. code-block:: console

    $ fusesoc library add fusesoc-generators-lib https://github.com/fusesoc/fusesoc-generators

Add the Cordicio repo as a library to access the core

.. code-block:: console

    $ fusesoc library add cordicio-lib https://github.com/ivanvig/cordicio

Use it in your own core by declaring ``ivanvig:math:cordicio`` as a dependency.

The FuseSoC chisel generator will automatically generate the Verilog source
code from the chisel sources

The Verilog source code can also be generated by running

.. code-block:: console

    $ sbt run

Architecture
------------

The following block diagram shows the iterative cordic architecture

.. image:: images/cordic_arch.svg

Parameters
----------

in_width
  Total bit width (integer + fractional) of all data signals

in_frac
  Fractional bit width of all data signals

n_stages
  Number of CORDIC interations to be run 

.. note::
   Since all signals share the same bit width and fractional bits, the CORDIC
   gain should be taken into account when defining the ranges of the signals;
   otherwise, overflow errors might occur.

Port Map
--------

in_x 
  Input for the x value

in_y
  Input for the y value

in_z
  Input for the z value

in_mode
  Input for mode selection (0 = rotation mode, 1 = vectoring mode)

in_start
  Input to indicate the start of the process

out_x 
  Output for the x value

out_y
  Output for the y value

out_z
  Output for the z value

out_busy
  Output that is asserted while the CORDIC is calculating the result

.. note::
   The Z value does not follow the traditional fixed-point binary
   representation; instead, it uses fractions of Pi as increments, such that
   the maximum representable value is Pi and the minimum is -Pi.

Running tests
-------------

To run the tests the following command is used

.. code-block:: console

    $ sbt test

The expected output should look like this

.. code-block:: none

    [info] CordicTest:
    [info] Cordic
    [info] - should generate a sin and cos wave
    [info] - should rotate a vector
    [info] - should convert from polar to cartesian
    [info] - should calculate arctan function
    [info] - should convert from cartesian to polar
    [info] Run completed in 4 seconds, 396 milliseconds.
    [info] Total number of tests run: 5
    [info] Suites: completed 1, aborted 0
    [info] Tests: succeeded 5, failed 0, canceled 0, ignored 0, pending 0
    [info] All tests passed.
